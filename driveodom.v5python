{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nrTrack = Encoder(brain.three_wire_port.e)\nsTrack = Encoder(brain.three_wire_port.g)\ninertial = Inertial(Ports.PORT15)\ncontroller_1 = Controller(PRIMARY)\nright_motor_group_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nright_motor_group_motor_b = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nright_motor_group = MotorGroup(right_motor_group_motor_a, right_motor_group_motor_b)\nleft_motor_group_motor_a = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nleft_motor_group_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nleft_motor_group = MotorGroup(left_motor_group_motor_a, left_motor_group_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ninertial.calibrate()\nwait(3,SECONDS)\n\ndef rad(deg): #converts deg to rad\n    rad = deg * math.pi / 180\n    return rad\n\n\n#############\n#CONSTANTS\n###############\n#tracking wheel diameter (inches)\ndiameter = 2.75 #placeholder\n\n#starting heading(degrees)\nstartTheta = 0 #placeholder\n\n#starting (x, y) coord of the robot (inches)\n    #relative to ________ (0, 0)\nstartX = 0 #placeholder\nstartY = 0 #placeholder\n\n#distance of tracking wheel from tracking center (inches)\nrOffset = 1 #placeholder\nsOffset = 1 #placeholder\n\n#Calculation variables\nrPrevRot = 0\nsPrevRot = 0\nprevTheta = startTheta\nglobalX = startX\nglobalY = startY\n\nleft_motor_group.spin(FORWARD)\nright_motor_group.spin(FORWARD)\n\nwhile(True):\n    #DRIVE\n    left_motor_group.set_velocity((controller_1.axis3.position() + controller_1.axis1.position())*0.8, PERCENT)\n    right_motor_group.set_velocity(-(controller_1.axis3.position() - controller_1.axis1.position())*0.8, PERCENT)\n    \n    #ODOM\n    #get encoder values (degrees)\n    rRot = rTrack.position(DEGREES)\n    sRot = -sTrack.position(DEGREES)\n\n    #tracking distance (inches)\n    rDist = (rRot - rPrevRot) / 360 * (diameter * math.pi) \n    sDist = (sRot - sPrevRot) / 360 * (diameter * math.pi) \n\n    #update previous rotaion values (inches)\n    rPrevRot = rRot\n    sPrevRot = sRot\n\n    #current absolute orientation\n    theta = inertial.heading(DEGREES)\n\n    # #wraps angle around when over or under 360\n    # if (theta > 360):\n    #     theta -= 360\n    # elif (theta < 0):\n    #     theta += 360\n\n    #change in angle of the robot(degrees)\n    delTheta = theta - prevTheta\n\n    #local coordinate x and y\n    if (delTheta == 0): #if change in angle is zero, it's only translation (no arc) (inches)\n        localX = sDist\n        localY = rDist\n\n    else: #else, calculation new local (x, y) using arcs (inches)\n        #radius of tracking center and side tracking wheel (inches)\n        cRadius = rDist / rad(delTheta) + rOffset\n        sRadius = sDist / rad(delTheta) + sOffset\n\n        localX = 2 * math.sin(rad(delTheta) / 2) * sRadius\n        localY = 2 * math.sin(rad(delTheta) / 2) * cRadius\n\n    # #calculate global(x, y) using trig\n    # #change in x and y in the global coordinate from localX\n    # xGlobalX = localX * math.cos(rad(delTheta) / 2)\n    # xGlobalY = localX * math.sin(rad(delTheta) / 2)\n\n    # #change in x and y in the global coordinate from localY\n    # yGlobalX = localY * math.sin(rad(delTheta) / 2)\n    # yGlobalY = localY * math.cos(rad(delTheta) / 2)\n\n    # #combine x and y changes from localX and localY\n    # delGlobalX = yGlobalX + xGlobalX\n    # delGlobalY = yGlobalY - xGlobalY\n\n    #calculate global(x, y) by converting to polar coords then back to cartesian coords\n    #average orientation, the offset of the local coord from the global coord (degrees)\n    avgOrient = prevTheta + (delTheta / 2)\n    \n    #radical coord for the polar coords, the hypotenuse of x and y (inches)\n    r = math.sqrt(localX ** 2 + localY ** 2)\n    \n    #angular coord for the polar coords (radians)\n    phi = math.atan2(localY, localX)\n\n    #revert how much the local coord rotated (radians)\n    newPhi = phi - rad(avgOrient)\n\n    #convert polar coords to cartesian coords (inches)\n    delGlobalX = r * math.cos(newPhi)\n    delGlobalY = r * math.sin(newPhi)\n\n    #update global(x, y)\n    globalX += delGlobalX\n    globalY += delGlobalY\n\n    print(globalX, globalY, theta, delTheta)\n    controller_1.screen.set_cursor(1,1)\n    controller_1.screen.print(rRot)\n    controller_1.screen.set_cursor(2,1)\n    controller_1.screen.print(sRot)\n    controller_1.screen.clear_screen()\n\n    #update prevTheta for next loop\n    prevTheta = theta\n\n    wait(20, MSEC)","textLanguage":"python","rconfig":[{"port":[5,6],"name":"rTrack","customName":true,"deviceType":"Encoder","deviceClass":"encoder","setting":{},"triportSourcePort":22},{"port":[7,8],"name":"sTrack","customName":true,"deviceType":"Encoder","deviceClass":"encoder","setting":{},"triportSourcePort":22},{"port":[15],"name":"inertial","customName":true,"deviceType":"Inertial","deviceClass":"inertial","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[11,1],"name":"right_motor_group","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[10,20],"name":"left_motor_group","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}