{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nBackL_motor_a = Motor(Ports.PORT16, GearSetting.RATIO_18_1, False)\nBackL_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\nBackL = MotorGroup(BackL_motor_a, BackL_motor_b)\nBackR_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_18_1, False)\nBackR_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_18_1, False)\nBackR = MotorGroup(BackR_motor_a, BackR_motor_b)\nFrontL = Motor(Ports.PORT15, GearSetting.RATIO_18_1, False)\nFrontR = Motor(Ports.PORT21, GearSetting.RATIO_18_1, False)\nFlywheel = Motor(Ports.PORT8, GearSetting.RATIO_18_1, False)\nIntake = Motor(Ports.PORT19, GearSetting.RATIO_18_1, False)\nEndgame = DigitalOut(brain.three_wire_port.a)\n# vex-vision-config:begin\neyes__REDPLATE = Signature(1, -2835, -2341, -2588,8907, 9987, 9447,4, 0)\neyes = Vision(Ports.PORT17, 50, eyes__REDPLATE)\n# vex-vision-config:end\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:\n#\tAuthor:\n#\tCreated:\n#\tConfiguration:\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\ndef pre_autonomous():\n    # actions to do when the program starts\n    brain.screen.clear_screen()\n    brain.screen.print(\"pre auton code\")\n    wait(1, SECONDS)\n    # BackL.set_velocity(100,PERCENT)\n    # FrontL.set_velocity(100,PERCENT)    \n    # BackR.set_velocity(100,PERCENT)\n    # FrontR.set_velocity(100,PERCENT)\n    # Intake.set_velocity(100,PERCENT)\n\n    BackL.set_velocity(30,PERCENT)\n    FrontL.set_velocity(30,PERCENT)    \n    BackR.set_velocity(7,PERCENT)\n    FrontR.set_velocity(7,PERCENT)\n    Intake.set_velocity(100,PERCENT)\n\ndef autonomous():\n    brain.screen.clear_screen()\n    brain.screen.print(\"autonomous code\")\n    # place automonous code here\n    # BackL.spin(FORWARD)\n    # FrontL.spin(FORWARD) \n    # BackR.spin(REVERSE)\n    # FrontR.spin(REVERSE)\n    # wait(0.6,SECONDS)\n    # Intake.spin_for(FORWARD,400,DEGREES)\n    # BackL.stop()\n    # FrontL.stop()\n    # BackR.stop()\n    # FrontR.stop()\n    \n    BackL.spin(FORWARD)\n    FrontL.spin(FORWARD) \n    BackR.spin(REVERSE)\n    FrontR.spin(REVERSE)\n    wait(5,SECONDS)\n    BackR.set_velocity(30,PERCENT)\n    FrontR.set_velocity(30,PERCENT)\n    Intake.spin_for(FORWARD,350,DEGREES)\n    BackL.stop()\n    FrontL.stop()\n    BackR.stop()\n    FrontR.stop()\n\ndef user_control():\n    brain.screen.clear_screen()\n    Kp = 0.3\n    Ki = 0\n    Kd = 0.05\n    Goal = 0\n    Goal = eyes.take_snapshot(eyes__REDPLATE)\n    if Goal is not None:\n        AbsError = (eyes.largest_object().centerX - 190)\n    else:\n        AbsError = 0\n    PastError = AbsError\n    ErrorI = 0\n    Total = 0\n    TotalError = 0\n    SlowFactor = 1\n    Largest = 1\n    Scaling = 1\n    FlyVariable = 8\n    FineTurn = 0\n    QuickTurn = 0\n    AimAmount = 0\n    ErrorP = 0\n    ErrorI = 0\n    ErrorD = 0\n    BackL.spin(FORWARD,0,VOLT)\n    FrontL.spin(FORWARD,0,VOLT)\n    BackR.spin(FORWARD,0,VOLT)\n    FrontR.spin(FORWARD,0,VOLT)\n    Flywheel.spin(REVERSE,8,VOLT)\n \n\n\n    # place driver control in this while loop\n    while True:\n        if controller_1.buttonR2.pressing():\n            FineTurn = 2\n        elif controller_1.buttonL2.pressing():\n            FineTurn = -2\n        else:\n            FineTurn = 0\n\n        if controller_1.axis1.position()>=17:\n            QuickTurn = 5\n        elif controller_1.axis1.position()<=-17:\n            QuickTurn = -5\n        else:\n            QuickTurn = 0\n        \n        Goal = eyes.take_snapshot(eyes__REDPLATE)\n        if controller_1.buttonX.pressing() and Goal is not None:\n\n            AbsError = (eyes.largest_object().centerX - 190)/8\n            ErrorP = Kp * AbsError\n            TotalError += PastError\n            if (TotalError >= 5 ):\n                ErrorI = Ki * TotalError\n            else:\n                ErrorI = 0\n                \n            ErrorD = Kd * (AbsError - PastError)\n            PastError = AbsError\n                \n            AimAmount = ErrorP + ErrorI + ErrorD\n\n            if (AimAmount >= 5):\n                AimAmount = 5\n                \n            if (AimAmount <= -5):\n                AimAmount = -5\n        else: \n            AimAmount = 0\n            AbsError = 0\n        Total = (SlowFactor*(controller_1.axis3.position()/10)+QuickTurn+FineTurn+AimAmount)\n        if (abs(Total) > 11):\n            Scaling = 11/Total\n        else:\n            Scaling = 1\n\n        BackL.spin(FORWARD,Scaling*(SlowFactor*(controller_1.axis3.position()/10)+QuickTurn+FineTurn+AimAmount),VOLT)\n        FrontL.spin(FORWARD,Scaling*(SlowFactor*(controller_1.axis3.position()/10)+QuickTurn+FineTurn+AimAmount),VOLT)\n        BackR.spin(FORWARD,-Scaling*(SlowFactor*(controller_1.axis3.position()/10)-QuickTurn-FineTurn-AimAmount),VOLT)\n        FrontR.spin(FORWARD,-Scaling*(SlowFactor*(controller_1.axis3.position()/10)-QuickTurn-FineTurn-AimAmount),VOLT)\n\n        Flywheel.spin(REVERSE,FlyVariable,VOLT)\n        if controller_1.buttonUp.pressing():\n            FlyVariable += 0.25\n        if controller_1.buttonDown.pressing():\n            FlyVariable -= 0.25\n\n        if (controller_1.buttonL1.pressing()):\n            Intake.spin(REVERSE,11,VOLT)\n            SlowFactor = 0.5\n        elif (controller_1.buttonR1.pressing()):\n            Intake.spin(FORWARD,11,VOLT)\n            SlowFactor = 0.5\n        else:\n            Intake.stop()\n            SlowFactor = 1\n        \n        if controller_1.buttonA.pressing() and controller_1.buttonB.pressing():\n            Endgame.set(True)\n        else:\n            Endgame.set(False)\n\n        controller_1.screen.clear_screen()\n        controller_1.screen.set_cursor(1,1)\n        controller_1.screen.print(FlyVariable,Scaling*(SlowFactor*(controller_1.axis3.position()/10)+QuickTurn+FineTurn+AimAmount),-Scaling*(SlowFactor*(controller_1.axis3.position()/10)-QuickTurn-FineTurn-AimAmount))\n        controller_1.screen.set_cursor(2,1)\n        controller_1.screen.print(ErrorP,ErrorD,AimAmount)\n    # create competition instance\ncomp = Competition(user_control, autonomous)\npre_autonomous()\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[16,20],"name":"BackL","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[9,10],"name":"BackR","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[15],"name":"FrontL","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[21],"name":"FrontR","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[8],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[19],"name":"Intake","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[1],"name":"Endgame","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[17],"name":"eyes","customName":true,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"REDPLATE\",\"parameters\":{\"uMin\":-2835,\"uMax\":-2341,\"uMean\":-2588,\"vMin\":8907,\"vMax\":9987,\"vMean\":9447,\"rgb\":1186360.5208333333,\"type\":0,\"name\":\"REDPLATE\"},\"range\":4},{\"name\":\"SIG_2\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_2\"},\"range\":2.5},{\"name\":\"SIG_3\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_3\"},\"range\":2.5},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":5,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}